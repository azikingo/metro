// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"team-manager/ent/direction"
	"team-manager/ent/predicate"
	"team-manager/ent/schedule"
	"team-manager/ent/station"
	"team-manager/ent/user"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDirection = "Direction"
	TypeSchedule  = "Schedule"
	TypeStation   = "Station"
	TypeUser      = "User"
)

// DirectionMutation represents an operation that mutates the Direction nodes in the graph.
type DirectionMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int64
	start_station_id           *int64
	addstart_station_id        *int64
	end_station_id             *int64
	addend_station_id          *int64
	created_at                 *time.Time
	clearedFields              map[string]struct{}
	direction_schedules        map[int64]struct{}
	removeddirection_schedules map[int64]struct{}
	cleareddirection_schedules bool
	done                       bool
	oldValue                   func(context.Context) (*Direction, error)
	predicates                 []predicate.Direction
}

var _ ent.Mutation = (*DirectionMutation)(nil)

// directionOption allows management of the mutation configuration using functional options.
type directionOption func(*DirectionMutation)

// newDirectionMutation creates new mutation for the Direction entity.
func newDirectionMutation(c config, op Op, opts ...directionOption) *DirectionMutation {
	m := &DirectionMutation{
		config:        c,
		op:            op,
		typ:           TypeDirection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDirectionID sets the ID field of the mutation.
func withDirectionID(id int64) directionOption {
	return func(m *DirectionMutation) {
		var (
			err   error
			once  sync.Once
			value *Direction
		)
		m.oldValue = func(ctx context.Context) (*Direction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Direction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDirection sets the old Direction of the mutation.
func withDirection(node *Direction) directionOption {
	return func(m *DirectionMutation) {
		m.oldValue = func(context.Context) (*Direction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DirectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DirectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Direction entities.
func (m *DirectionMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DirectionMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DirectionMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Direction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStartStationID sets the "start_station_id" field.
func (m *DirectionMutation) SetStartStationID(i int64) {
	m.start_station_id = &i
	m.addstart_station_id = nil
}

// StartStationID returns the value of the "start_station_id" field in the mutation.
func (m *DirectionMutation) StartStationID() (r int64, exists bool) {
	v := m.start_station_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStartStationID returns the old "start_station_id" field's value of the Direction entity.
// If the Direction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DirectionMutation) OldStartStationID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartStationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartStationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartStationID: %w", err)
	}
	return oldValue.StartStationID, nil
}

// AddStartStationID adds i to the "start_station_id" field.
func (m *DirectionMutation) AddStartStationID(i int64) {
	if m.addstart_station_id != nil {
		*m.addstart_station_id += i
	} else {
		m.addstart_station_id = &i
	}
}

// AddedStartStationID returns the value that was added to the "start_station_id" field in this mutation.
func (m *DirectionMutation) AddedStartStationID() (r int64, exists bool) {
	v := m.addstart_station_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetStartStationID resets all changes to the "start_station_id" field.
func (m *DirectionMutation) ResetStartStationID() {
	m.start_station_id = nil
	m.addstart_station_id = nil
}

// SetEndStationID sets the "end_station_id" field.
func (m *DirectionMutation) SetEndStationID(i int64) {
	m.end_station_id = &i
	m.addend_station_id = nil
}

// EndStationID returns the value of the "end_station_id" field in the mutation.
func (m *DirectionMutation) EndStationID() (r int64, exists bool) {
	v := m.end_station_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEndStationID returns the old "end_station_id" field's value of the Direction entity.
// If the Direction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DirectionMutation) OldEndStationID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndStationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndStationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndStationID: %w", err)
	}
	return oldValue.EndStationID, nil
}

// AddEndStationID adds i to the "end_station_id" field.
func (m *DirectionMutation) AddEndStationID(i int64) {
	if m.addend_station_id != nil {
		*m.addend_station_id += i
	} else {
		m.addend_station_id = &i
	}
}

// AddedEndStationID returns the value that was added to the "end_station_id" field in this mutation.
func (m *DirectionMutation) AddedEndStationID() (r int64, exists bool) {
	v := m.addend_station_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetEndStationID resets all changes to the "end_station_id" field.
func (m *DirectionMutation) ResetEndStationID() {
	m.end_station_id = nil
	m.addend_station_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DirectionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DirectionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Direction entity.
// If the Direction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DirectionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DirectionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddDirectionScheduleIDs adds the "direction_schedules" edge to the Schedule entity by ids.
func (m *DirectionMutation) AddDirectionScheduleIDs(ids ...int64) {
	if m.direction_schedules == nil {
		m.direction_schedules = make(map[int64]struct{})
	}
	for i := range ids {
		m.direction_schedules[ids[i]] = struct{}{}
	}
}

// ClearDirectionSchedules clears the "direction_schedules" edge to the Schedule entity.
func (m *DirectionMutation) ClearDirectionSchedules() {
	m.cleareddirection_schedules = true
}

// DirectionSchedulesCleared reports if the "direction_schedules" edge to the Schedule entity was cleared.
func (m *DirectionMutation) DirectionSchedulesCleared() bool {
	return m.cleareddirection_schedules
}

// RemoveDirectionScheduleIDs removes the "direction_schedules" edge to the Schedule entity by IDs.
func (m *DirectionMutation) RemoveDirectionScheduleIDs(ids ...int64) {
	if m.removeddirection_schedules == nil {
		m.removeddirection_schedules = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.direction_schedules, ids[i])
		m.removeddirection_schedules[ids[i]] = struct{}{}
	}
}

// RemovedDirectionSchedules returns the removed IDs of the "direction_schedules" edge to the Schedule entity.
func (m *DirectionMutation) RemovedDirectionSchedulesIDs() (ids []int64) {
	for id := range m.removeddirection_schedules {
		ids = append(ids, id)
	}
	return
}

// DirectionSchedulesIDs returns the "direction_schedules" edge IDs in the mutation.
func (m *DirectionMutation) DirectionSchedulesIDs() (ids []int64) {
	for id := range m.direction_schedules {
		ids = append(ids, id)
	}
	return
}

// ResetDirectionSchedules resets all changes to the "direction_schedules" edge.
func (m *DirectionMutation) ResetDirectionSchedules() {
	m.direction_schedules = nil
	m.cleareddirection_schedules = false
	m.removeddirection_schedules = nil
}

// Where appends a list predicates to the DirectionMutation builder.
func (m *DirectionMutation) Where(ps ...predicate.Direction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DirectionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DirectionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Direction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DirectionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DirectionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Direction).
func (m *DirectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DirectionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.start_station_id != nil {
		fields = append(fields, direction.FieldStartStationID)
	}
	if m.end_station_id != nil {
		fields = append(fields, direction.FieldEndStationID)
	}
	if m.created_at != nil {
		fields = append(fields, direction.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DirectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case direction.FieldStartStationID:
		return m.StartStationID()
	case direction.FieldEndStationID:
		return m.EndStationID()
	case direction.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DirectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case direction.FieldStartStationID:
		return m.OldStartStationID(ctx)
	case direction.FieldEndStationID:
		return m.OldEndStationID(ctx)
	case direction.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Direction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DirectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case direction.FieldStartStationID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartStationID(v)
		return nil
	case direction.FieldEndStationID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndStationID(v)
		return nil
	case direction.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Direction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DirectionMutation) AddedFields() []string {
	var fields []string
	if m.addstart_station_id != nil {
		fields = append(fields, direction.FieldStartStationID)
	}
	if m.addend_station_id != nil {
		fields = append(fields, direction.FieldEndStationID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DirectionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case direction.FieldStartStationID:
		return m.AddedStartStationID()
	case direction.FieldEndStationID:
		return m.AddedEndStationID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DirectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case direction.FieldStartStationID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartStationID(v)
		return nil
	case direction.FieldEndStationID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndStationID(v)
		return nil
	}
	return fmt.Errorf("unknown Direction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DirectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DirectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DirectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Direction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DirectionMutation) ResetField(name string) error {
	switch name {
	case direction.FieldStartStationID:
		m.ResetStartStationID()
		return nil
	case direction.FieldEndStationID:
		m.ResetEndStationID()
		return nil
	case direction.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Direction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DirectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.direction_schedules != nil {
		edges = append(edges, direction.EdgeDirectionSchedules)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DirectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case direction.EdgeDirectionSchedules:
		ids := make([]ent.Value, 0, len(m.direction_schedules))
		for id := range m.direction_schedules {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DirectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddirection_schedules != nil {
		edges = append(edges, direction.EdgeDirectionSchedules)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DirectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case direction.EdgeDirectionSchedules:
		ids := make([]ent.Value, 0, len(m.removeddirection_schedules))
		for id := range m.removeddirection_schedules {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DirectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddirection_schedules {
		edges = append(edges, direction.EdgeDirectionSchedules)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DirectionMutation) EdgeCleared(name string) bool {
	switch name {
	case direction.EdgeDirectionSchedules:
		return m.cleareddirection_schedules
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DirectionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Direction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DirectionMutation) ResetEdge(name string) error {
	switch name {
	case direction.EdgeDirectionSchedules:
		m.ResetDirectionSchedules()
		return nil
	}
	return fmt.Errorf("unknown Direction edge %s", name)
}

// ScheduleMutation represents an operation that mutates the Schedule nodes in the graph.
type ScheduleMutation struct {
	config
	op               Op
	typ              string
	id               *int64
	time             *string
	created_at       *time.Time
	clearedFields    map[string]struct{}
	station          *int64
	clearedstation   bool
	direction        *int64
	cleareddirection bool
	done             bool
	oldValue         func(context.Context) (*Schedule, error)
	predicates       []predicate.Schedule
}

var _ ent.Mutation = (*ScheduleMutation)(nil)

// scheduleOption allows management of the mutation configuration using functional options.
type scheduleOption func(*ScheduleMutation)

// newScheduleMutation creates new mutation for the Schedule entity.
func newScheduleMutation(c config, op Op, opts ...scheduleOption) *ScheduleMutation {
	m := &ScheduleMutation{
		config:        c,
		op:            op,
		typ:           TypeSchedule,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScheduleID sets the ID field of the mutation.
func withScheduleID(id int64) scheduleOption {
	return func(m *ScheduleMutation) {
		var (
			err   error
			once  sync.Once
			value *Schedule
		)
		m.oldValue = func(ctx context.Context) (*Schedule, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Schedule.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSchedule sets the old Schedule of the mutation.
func withSchedule(node *Schedule) scheduleOption {
	return func(m *ScheduleMutation) {
		m.oldValue = func(context.Context) (*Schedule, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScheduleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScheduleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Schedule entities.
func (m *ScheduleMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ScheduleMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ScheduleMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Schedule.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStationID sets the "station_id" field.
func (m *ScheduleMutation) SetStationID(i int64) {
	m.station = &i
}

// StationID returns the value of the "station_id" field in the mutation.
func (m *ScheduleMutation) StationID() (r int64, exists bool) {
	v := m.station
	if v == nil {
		return
	}
	return *v, true
}

// OldStationID returns the old "station_id" field's value of the Schedule entity.
// If the Schedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScheduleMutation) OldStationID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStationID: %w", err)
	}
	return oldValue.StationID, nil
}

// ResetStationID resets all changes to the "station_id" field.
func (m *ScheduleMutation) ResetStationID() {
	m.station = nil
}

// SetDirectionID sets the "direction_id" field.
func (m *ScheduleMutation) SetDirectionID(i int64) {
	m.direction = &i
}

// DirectionID returns the value of the "direction_id" field in the mutation.
func (m *ScheduleMutation) DirectionID() (r int64, exists bool) {
	v := m.direction
	if v == nil {
		return
	}
	return *v, true
}

// OldDirectionID returns the old "direction_id" field's value of the Schedule entity.
// If the Schedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScheduleMutation) OldDirectionID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDirectionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDirectionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDirectionID: %w", err)
	}
	return oldValue.DirectionID, nil
}

// ResetDirectionID resets all changes to the "direction_id" field.
func (m *ScheduleMutation) ResetDirectionID() {
	m.direction = nil
}

// SetTime sets the "time" field.
func (m *ScheduleMutation) SetTime(s string) {
	m.time = &s
}

// Time returns the value of the "time" field in the mutation.
func (m *ScheduleMutation) Time() (r string, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Schedule entity.
// If the Schedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScheduleMutation) OldTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "time" field.
func (m *ScheduleMutation) ResetTime() {
	m.time = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ScheduleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ScheduleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Schedule entity.
// If the Schedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScheduleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ScheduleMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearStation clears the "station" edge to the Station entity.
func (m *ScheduleMutation) ClearStation() {
	m.clearedstation = true
	m.clearedFields[schedule.FieldStationID] = struct{}{}
}

// StationCleared reports if the "station" edge to the Station entity was cleared.
func (m *ScheduleMutation) StationCleared() bool {
	return m.clearedstation
}

// StationIDs returns the "station" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StationID instead. It exists only for internal usage by the builders.
func (m *ScheduleMutation) StationIDs() (ids []int64) {
	if id := m.station; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStation resets all changes to the "station" edge.
func (m *ScheduleMutation) ResetStation() {
	m.station = nil
	m.clearedstation = false
}

// ClearDirection clears the "direction" edge to the Direction entity.
func (m *ScheduleMutation) ClearDirection() {
	m.cleareddirection = true
	m.clearedFields[schedule.FieldDirectionID] = struct{}{}
}

// DirectionCleared reports if the "direction" edge to the Direction entity was cleared.
func (m *ScheduleMutation) DirectionCleared() bool {
	return m.cleareddirection
}

// DirectionIDs returns the "direction" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DirectionID instead. It exists only for internal usage by the builders.
func (m *ScheduleMutation) DirectionIDs() (ids []int64) {
	if id := m.direction; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDirection resets all changes to the "direction" edge.
func (m *ScheduleMutation) ResetDirection() {
	m.direction = nil
	m.cleareddirection = false
}

// Where appends a list predicates to the ScheduleMutation builder.
func (m *ScheduleMutation) Where(ps ...predicate.Schedule) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ScheduleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ScheduleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Schedule, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ScheduleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ScheduleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Schedule).
func (m *ScheduleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ScheduleMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.station != nil {
		fields = append(fields, schedule.FieldStationID)
	}
	if m.direction != nil {
		fields = append(fields, schedule.FieldDirectionID)
	}
	if m.time != nil {
		fields = append(fields, schedule.FieldTime)
	}
	if m.created_at != nil {
		fields = append(fields, schedule.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ScheduleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case schedule.FieldStationID:
		return m.StationID()
	case schedule.FieldDirectionID:
		return m.DirectionID()
	case schedule.FieldTime:
		return m.Time()
	case schedule.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ScheduleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case schedule.FieldStationID:
		return m.OldStationID(ctx)
	case schedule.FieldDirectionID:
		return m.OldDirectionID(ctx)
	case schedule.FieldTime:
		return m.OldTime(ctx)
	case schedule.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Schedule field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScheduleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case schedule.FieldStationID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStationID(v)
		return nil
	case schedule.FieldDirectionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDirectionID(v)
		return nil
	case schedule.FieldTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case schedule.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Schedule field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ScheduleMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ScheduleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScheduleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Schedule numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ScheduleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ScheduleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScheduleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Schedule nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ScheduleMutation) ResetField(name string) error {
	switch name {
	case schedule.FieldStationID:
		m.ResetStationID()
		return nil
	case schedule.FieldDirectionID:
		m.ResetDirectionID()
		return nil
	case schedule.FieldTime:
		m.ResetTime()
		return nil
	case schedule.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Schedule field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ScheduleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.station != nil {
		edges = append(edges, schedule.EdgeStation)
	}
	if m.direction != nil {
		edges = append(edges, schedule.EdgeDirection)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ScheduleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case schedule.EdgeStation:
		if id := m.station; id != nil {
			return []ent.Value{*id}
		}
	case schedule.EdgeDirection:
		if id := m.direction; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ScheduleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ScheduleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ScheduleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedstation {
		edges = append(edges, schedule.EdgeStation)
	}
	if m.cleareddirection {
		edges = append(edges, schedule.EdgeDirection)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ScheduleMutation) EdgeCleared(name string) bool {
	switch name {
	case schedule.EdgeStation:
		return m.clearedstation
	case schedule.EdgeDirection:
		return m.cleareddirection
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ScheduleMutation) ClearEdge(name string) error {
	switch name {
	case schedule.EdgeStation:
		m.ClearStation()
		return nil
	case schedule.EdgeDirection:
		m.ClearDirection()
		return nil
	}
	return fmt.Errorf("unknown Schedule unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ScheduleMutation) ResetEdge(name string) error {
	switch name {
	case schedule.EdgeStation:
		m.ResetStation()
		return nil
	case schedule.EdgeDirection:
		m.ResetDirection()
		return nil
	}
	return fmt.Errorf("unknown Schedule edge %s", name)
}

// StationMutation represents an operation that mutates the Station nodes in the graph.
type StationMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int64
	name                     *string
	latitude                 *float32
	addlatitude              *float32
	longitude                *float32
	addlongitude             *float32
	is_end_station           *bool
	created_at               *time.Time
	clearedFields            map[string]struct{}
	station_schedules        map[int64]struct{}
	removedstation_schedules map[int64]struct{}
	clearedstation_schedules bool
	done                     bool
	oldValue                 func(context.Context) (*Station, error)
	predicates               []predicate.Station
}

var _ ent.Mutation = (*StationMutation)(nil)

// stationOption allows management of the mutation configuration using functional options.
type stationOption func(*StationMutation)

// newStationMutation creates new mutation for the Station entity.
func newStationMutation(c config, op Op, opts ...stationOption) *StationMutation {
	m := &StationMutation{
		config:        c,
		op:            op,
		typ:           TypeStation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStationID sets the ID field of the mutation.
func withStationID(id int64) stationOption {
	return func(m *StationMutation) {
		var (
			err   error
			once  sync.Once
			value *Station
		)
		m.oldValue = func(ctx context.Context) (*Station, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Station.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStation sets the old Station of the mutation.
func withStation(node *Station) stationOption {
	return func(m *StationMutation) {
		m.oldValue = func(context.Context) (*Station, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Station entities.
func (m *StationMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StationMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StationMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Station.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *StationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Station entity.
// If the Station object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *StationMutation) ClearName() {
	m.name = nil
	m.clearedFields[station.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *StationMutation) NameCleared() bool {
	_, ok := m.clearedFields[station.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *StationMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, station.FieldName)
}

// SetLatitude sets the "latitude" field.
func (m *StationMutation) SetLatitude(f float32) {
	m.latitude = &f
	m.addlatitude = nil
}

// Latitude returns the value of the "latitude" field in the mutation.
func (m *StationMutation) Latitude() (r float32, exists bool) {
	v := m.latitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLatitude returns the old "latitude" field's value of the Station entity.
// If the Station object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StationMutation) OldLatitude(ctx context.Context) (v *float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatitude: %w", err)
	}
	return oldValue.Latitude, nil
}

// AddLatitude adds f to the "latitude" field.
func (m *StationMutation) AddLatitude(f float32) {
	if m.addlatitude != nil {
		*m.addlatitude += f
	} else {
		m.addlatitude = &f
	}
}

// AddedLatitude returns the value that was added to the "latitude" field in this mutation.
func (m *StationMutation) AddedLatitude() (r float32, exists bool) {
	v := m.addlatitude
	if v == nil {
		return
	}
	return *v, true
}

// ClearLatitude clears the value of the "latitude" field.
func (m *StationMutation) ClearLatitude() {
	m.latitude = nil
	m.addlatitude = nil
	m.clearedFields[station.FieldLatitude] = struct{}{}
}

// LatitudeCleared returns if the "latitude" field was cleared in this mutation.
func (m *StationMutation) LatitudeCleared() bool {
	_, ok := m.clearedFields[station.FieldLatitude]
	return ok
}

// ResetLatitude resets all changes to the "latitude" field.
func (m *StationMutation) ResetLatitude() {
	m.latitude = nil
	m.addlatitude = nil
	delete(m.clearedFields, station.FieldLatitude)
}

// SetLongitude sets the "longitude" field.
func (m *StationMutation) SetLongitude(f float32) {
	m.longitude = &f
	m.addlongitude = nil
}

// Longitude returns the value of the "longitude" field in the mutation.
func (m *StationMutation) Longitude() (r float32, exists bool) {
	v := m.longitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLongitude returns the old "longitude" field's value of the Station entity.
// If the Station object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StationMutation) OldLongitude(ctx context.Context) (v *float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongitude: %w", err)
	}
	return oldValue.Longitude, nil
}

// AddLongitude adds f to the "longitude" field.
func (m *StationMutation) AddLongitude(f float32) {
	if m.addlongitude != nil {
		*m.addlongitude += f
	} else {
		m.addlongitude = &f
	}
}

// AddedLongitude returns the value that was added to the "longitude" field in this mutation.
func (m *StationMutation) AddedLongitude() (r float32, exists bool) {
	v := m.addlongitude
	if v == nil {
		return
	}
	return *v, true
}

// ClearLongitude clears the value of the "longitude" field.
func (m *StationMutation) ClearLongitude() {
	m.longitude = nil
	m.addlongitude = nil
	m.clearedFields[station.FieldLongitude] = struct{}{}
}

// LongitudeCleared returns if the "longitude" field was cleared in this mutation.
func (m *StationMutation) LongitudeCleared() bool {
	_, ok := m.clearedFields[station.FieldLongitude]
	return ok
}

// ResetLongitude resets all changes to the "longitude" field.
func (m *StationMutation) ResetLongitude() {
	m.longitude = nil
	m.addlongitude = nil
	delete(m.clearedFields, station.FieldLongitude)
}

// SetIsEndStation sets the "is_end_station" field.
func (m *StationMutation) SetIsEndStation(b bool) {
	m.is_end_station = &b
}

// IsEndStation returns the value of the "is_end_station" field in the mutation.
func (m *StationMutation) IsEndStation() (r bool, exists bool) {
	v := m.is_end_station
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEndStation returns the old "is_end_station" field's value of the Station entity.
// If the Station object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StationMutation) OldIsEndStation(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEndStation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEndStation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEndStation: %w", err)
	}
	return oldValue.IsEndStation, nil
}

// ResetIsEndStation resets all changes to the "is_end_station" field.
func (m *StationMutation) ResetIsEndStation() {
	m.is_end_station = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *StationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Station entity.
// If the Station object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddStationScheduleIDs adds the "station_schedules" edge to the Schedule entity by ids.
func (m *StationMutation) AddStationScheduleIDs(ids ...int64) {
	if m.station_schedules == nil {
		m.station_schedules = make(map[int64]struct{})
	}
	for i := range ids {
		m.station_schedules[ids[i]] = struct{}{}
	}
}

// ClearStationSchedules clears the "station_schedules" edge to the Schedule entity.
func (m *StationMutation) ClearStationSchedules() {
	m.clearedstation_schedules = true
}

// StationSchedulesCleared reports if the "station_schedules" edge to the Schedule entity was cleared.
func (m *StationMutation) StationSchedulesCleared() bool {
	return m.clearedstation_schedules
}

// RemoveStationScheduleIDs removes the "station_schedules" edge to the Schedule entity by IDs.
func (m *StationMutation) RemoveStationScheduleIDs(ids ...int64) {
	if m.removedstation_schedules == nil {
		m.removedstation_schedules = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.station_schedules, ids[i])
		m.removedstation_schedules[ids[i]] = struct{}{}
	}
}

// RemovedStationSchedules returns the removed IDs of the "station_schedules" edge to the Schedule entity.
func (m *StationMutation) RemovedStationSchedulesIDs() (ids []int64) {
	for id := range m.removedstation_schedules {
		ids = append(ids, id)
	}
	return
}

// StationSchedulesIDs returns the "station_schedules" edge IDs in the mutation.
func (m *StationMutation) StationSchedulesIDs() (ids []int64) {
	for id := range m.station_schedules {
		ids = append(ids, id)
	}
	return
}

// ResetStationSchedules resets all changes to the "station_schedules" edge.
func (m *StationMutation) ResetStationSchedules() {
	m.station_schedules = nil
	m.clearedstation_schedules = false
	m.removedstation_schedules = nil
}

// Where appends a list predicates to the StationMutation builder.
func (m *StationMutation) Where(ps ...predicate.Station) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Station, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Station).
func (m *StationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StationMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, station.FieldName)
	}
	if m.latitude != nil {
		fields = append(fields, station.FieldLatitude)
	}
	if m.longitude != nil {
		fields = append(fields, station.FieldLongitude)
	}
	if m.is_end_station != nil {
		fields = append(fields, station.FieldIsEndStation)
	}
	if m.created_at != nil {
		fields = append(fields, station.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case station.FieldName:
		return m.Name()
	case station.FieldLatitude:
		return m.Latitude()
	case station.FieldLongitude:
		return m.Longitude()
	case station.FieldIsEndStation:
		return m.IsEndStation()
	case station.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case station.FieldName:
		return m.OldName(ctx)
	case station.FieldLatitude:
		return m.OldLatitude(ctx)
	case station.FieldLongitude:
		return m.OldLongitude(ctx)
	case station.FieldIsEndStation:
		return m.OldIsEndStation(ctx)
	case station.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Station field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case station.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case station.FieldLatitude:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatitude(v)
		return nil
	case station.FieldLongitude:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongitude(v)
		return nil
	case station.FieldIsEndStation:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEndStation(v)
		return nil
	case station.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Station field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StationMutation) AddedFields() []string {
	var fields []string
	if m.addlatitude != nil {
		fields = append(fields, station.FieldLatitude)
	}
	if m.addlongitude != nil {
		fields = append(fields, station.FieldLongitude)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case station.FieldLatitude:
		return m.AddedLatitude()
	case station.FieldLongitude:
		return m.AddedLongitude()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case station.FieldLatitude:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatitude(v)
		return nil
	case station.FieldLongitude:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongitude(v)
		return nil
	}
	return fmt.Errorf("unknown Station numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(station.FieldName) {
		fields = append(fields, station.FieldName)
	}
	if m.FieldCleared(station.FieldLatitude) {
		fields = append(fields, station.FieldLatitude)
	}
	if m.FieldCleared(station.FieldLongitude) {
		fields = append(fields, station.FieldLongitude)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StationMutation) ClearField(name string) error {
	switch name {
	case station.FieldName:
		m.ClearName()
		return nil
	case station.FieldLatitude:
		m.ClearLatitude()
		return nil
	case station.FieldLongitude:
		m.ClearLongitude()
		return nil
	}
	return fmt.Errorf("unknown Station nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StationMutation) ResetField(name string) error {
	switch name {
	case station.FieldName:
		m.ResetName()
		return nil
	case station.FieldLatitude:
		m.ResetLatitude()
		return nil
	case station.FieldLongitude:
		m.ResetLongitude()
		return nil
	case station.FieldIsEndStation:
		m.ResetIsEndStation()
		return nil
	case station.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Station field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.station_schedules != nil {
		edges = append(edges, station.EdgeStationSchedules)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case station.EdgeStationSchedules:
		ids := make([]ent.Value, 0, len(m.station_schedules))
		for id := range m.station_schedules {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedstation_schedules != nil {
		edges = append(edges, station.EdgeStationSchedules)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case station.EdgeStationSchedules:
		ids := make([]ent.Value, 0, len(m.removedstation_schedules))
		for id := range m.removedstation_schedules {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedstation_schedules {
		edges = append(edges, station.EdgeStationSchedules)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StationMutation) EdgeCleared(name string) bool {
	switch name {
	case station.EdgeStationSchedules:
		return m.clearedstation_schedules
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StationMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Station unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StationMutation) ResetEdge(name string) error {
	switch name {
	case station.EdgeStationSchedules:
		m.ResetStationSchedules()
		return nil
	}
	return fmt.Errorf("unknown Station edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	tg_id         *int64
	addtg_id      *int64
	username      *string
	name          *string
	surname       *string
	email         *string
	phone         *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTgID sets the "tg_id" field.
func (m *UserMutation) SetTgID(i int64) {
	m.tg_id = &i
	m.addtg_id = nil
}

// TgID returns the value of the "tg_id" field in the mutation.
func (m *UserMutation) TgID() (r int64, exists bool) {
	v := m.tg_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTgID returns the old "tg_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTgID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTgID: %w", err)
	}
	return oldValue.TgID, nil
}

// AddTgID adds i to the "tg_id" field.
func (m *UserMutation) AddTgID(i int64) {
	if m.addtg_id != nil {
		*m.addtg_id += i
	} else {
		m.addtg_id = &i
	}
}

// AddedTgID returns the value that was added to the "tg_id" field in this mutation.
func (m *UserMutation) AddedTgID() (r int64, exists bool) {
	v := m.addtg_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTgID resets all changes to the "tg_id" field.
func (m *UserMutation) ResetTgID() {
	m.tg_id = nil
	m.addtg_id = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetSurname sets the "surname" field.
func (m *UserMutation) SetSurname(s string) {
	m.surname = &s
}

// Surname returns the value of the "surname" field in the mutation.
func (m *UserMutation) Surname() (r string, exists bool) {
	v := m.surname
	if v == nil {
		return
	}
	return *v, true
}

// OldSurname returns the old "surname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSurname(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSurname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSurname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSurname: %w", err)
	}
	return oldValue.Surname, nil
}

// ResetSurname resets all changes to the "surname" field.
func (m *UserMutation) ResetSurname() {
	m.surname = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.tg_id != nil {
		fields = append(fields, user.FieldTgID)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.surname != nil {
		fields = append(fields, user.FieldSurname)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldTgID:
		return m.TgID()
	case user.FieldUsername:
		return m.Username()
	case user.FieldName:
		return m.Name()
	case user.FieldSurname:
		return m.Surname()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldTgID:
		return m.OldTgID(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldSurname:
		return m.OldSurname(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldTgID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTgID(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldSurname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSurname(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addtg_id != nil {
		fields = append(fields, user.FieldTgID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldTgID:
		return m.AddedTgID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldTgID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTgID(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldTgID:
		m.ResetTgID()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldSurname:
		m.ResetSurname()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
