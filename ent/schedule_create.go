// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"team-manager/ent/direction"
	"team-manager/ent/schedule"
	"team-manager/ent/station"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScheduleCreate is the builder for creating a Schedule entity.
type ScheduleCreate struct {
	config
	mutation *ScheduleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStationID sets the "station_id" field.
func (sc *ScheduleCreate) SetStationID(i int64) *ScheduleCreate {
	sc.mutation.SetStationID(i)
	return sc
}

// SetDirectionID sets the "direction_id" field.
func (sc *ScheduleCreate) SetDirectionID(i int64) *ScheduleCreate {
	sc.mutation.SetDirectionID(i)
	return sc
}

// SetTime sets the "time" field.
func (sc *ScheduleCreate) SetTime(s string) *ScheduleCreate {
	sc.mutation.SetTime(s)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *ScheduleCreate) SetCreatedAt(t time.Time) *ScheduleCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ScheduleCreate) SetNillableCreatedAt(t *time.Time) *ScheduleCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ScheduleCreate) SetID(i int64) *ScheduleCreate {
	sc.mutation.SetID(i)
	return sc
}

// SetStation sets the "station" edge to the Station entity.
func (sc *ScheduleCreate) SetStation(s *Station) *ScheduleCreate {
	return sc.SetStationID(s.ID)
}

// SetDirection sets the "direction" edge to the Direction entity.
func (sc *ScheduleCreate) SetDirection(d *Direction) *ScheduleCreate {
	return sc.SetDirectionID(d.ID)
}

// Mutation returns the ScheduleMutation object of the builder.
func (sc *ScheduleCreate) Mutation() *ScheduleMutation {
	return sc.mutation
}

// Save creates the Schedule in the database.
func (sc *ScheduleCreate) Save(ctx context.Context) (*Schedule, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScheduleCreate) SaveX(ctx context.Context) *Schedule {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScheduleCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScheduleCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScheduleCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := schedule.DefaultCreatedAt
		sc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScheduleCreate) check() error {
	if _, ok := sc.mutation.StationID(); !ok {
		return &ValidationError{Name: "station_id", err: errors.New(`ent: missing required field "Schedule.station_id"`)}
	}
	if _, ok := sc.mutation.DirectionID(); !ok {
		return &ValidationError{Name: "direction_id", err: errors.New(`ent: missing required field "Schedule.direction_id"`)}
	}
	if _, ok := sc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "Schedule.time"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Schedule.created_at"`)}
	}
	if _, ok := sc.mutation.StationID(); !ok {
		return &ValidationError{Name: "station", err: errors.New(`ent: missing required edge "Schedule.station"`)}
	}
	if _, ok := sc.mutation.DirectionID(); !ok {
		return &ValidationError{Name: "direction", err: errors.New(`ent: missing required edge "Schedule.direction"`)}
	}
	return nil
}

func (sc *ScheduleCreate) sqlSave(ctx context.Context) (*Schedule, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ScheduleCreate) createSpec() (*Schedule, *sqlgraph.CreateSpec) {
	var (
		_node = &Schedule{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(schedule.Table, sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Time(); ok {
		_spec.SetField(schedule.FieldTime, field.TypeString, value)
		_node.Time = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(schedule.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sc.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.StationTable,
			Columns: []string{schedule.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.DirectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.DirectionTable,
			Columns: []string{schedule.DirectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(direction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DirectionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Schedule.Create().
//		SetStationID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScheduleUpsert) {
//			SetStationID(v+v).
//		}).
//		Exec(ctx)
func (sc *ScheduleCreate) OnConflict(opts ...sql.ConflictOption) *ScheduleUpsertOne {
	sc.conflict = opts
	return &ScheduleUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Schedule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *ScheduleCreate) OnConflictColumns(columns ...string) *ScheduleUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &ScheduleUpsertOne{
		create: sc,
	}
}

type (
	// ScheduleUpsertOne is the builder for "upsert"-ing
	//  one Schedule node.
	ScheduleUpsertOne struct {
		create *ScheduleCreate
	}

	// ScheduleUpsert is the "OnConflict" setter.
	ScheduleUpsert struct {
		*sql.UpdateSet
	}
)

// SetStationID sets the "station_id" field.
func (u *ScheduleUpsert) SetStationID(v int64) *ScheduleUpsert {
	u.Set(schedule.FieldStationID, v)
	return u
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *ScheduleUpsert) UpdateStationID() *ScheduleUpsert {
	u.SetExcluded(schedule.FieldStationID)
	return u
}

// SetDirectionID sets the "direction_id" field.
func (u *ScheduleUpsert) SetDirectionID(v int64) *ScheduleUpsert {
	u.Set(schedule.FieldDirectionID, v)
	return u
}

// UpdateDirectionID sets the "direction_id" field to the value that was provided on create.
func (u *ScheduleUpsert) UpdateDirectionID() *ScheduleUpsert {
	u.SetExcluded(schedule.FieldDirectionID)
	return u
}

// SetTime sets the "time" field.
func (u *ScheduleUpsert) SetTime(v string) *ScheduleUpsert {
	u.Set(schedule.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *ScheduleUpsert) UpdateTime() *ScheduleUpsert {
	u.SetExcluded(schedule.FieldTime)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ScheduleUpsert) SetCreatedAt(v time.Time) *ScheduleUpsert {
	u.Set(schedule.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ScheduleUpsert) UpdateCreatedAt() *ScheduleUpsert {
	u.SetExcluded(schedule.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Schedule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(schedule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScheduleUpsertOne) UpdateNewValues() *ScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(schedule.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Schedule.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScheduleUpsertOne) Ignore() *ScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScheduleUpsertOne) DoNothing() *ScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScheduleCreate.OnConflict
// documentation for more info.
func (u *ScheduleUpsertOne) Update(set func(*ScheduleUpsert)) *ScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScheduleUpsert{UpdateSet: update})
	}))
	return u
}

// SetStationID sets the "station_id" field.
func (u *ScheduleUpsertOne) SetStationID(v int64) *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetStationID(v)
	})
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *ScheduleUpsertOne) UpdateStationID() *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateStationID()
	})
}

// SetDirectionID sets the "direction_id" field.
func (u *ScheduleUpsertOne) SetDirectionID(v int64) *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetDirectionID(v)
	})
}

// UpdateDirectionID sets the "direction_id" field to the value that was provided on create.
func (u *ScheduleUpsertOne) UpdateDirectionID() *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateDirectionID()
	})
}

// SetTime sets the "time" field.
func (u *ScheduleUpsertOne) SetTime(v string) *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *ScheduleUpsertOne) UpdateTime() *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateTime()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ScheduleUpsertOne) SetCreatedAt(v time.Time) *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ScheduleUpsertOne) UpdateCreatedAt() *ScheduleUpsertOne {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *ScheduleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScheduleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScheduleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScheduleUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScheduleUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScheduleCreateBulk is the builder for creating many Schedule entities in bulk.
type ScheduleCreateBulk struct {
	config
	err      error
	builders []*ScheduleCreate
	conflict []sql.ConflictOption
}

// Save creates the Schedule entities in the database.
func (scb *ScheduleCreateBulk) Save(ctx context.Context) ([]*Schedule, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Schedule, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScheduleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScheduleCreateBulk) SaveX(ctx context.Context) []*Schedule {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScheduleCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScheduleCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Schedule.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScheduleUpsert) {
//			SetStationID(v+v).
//		}).
//		Exec(ctx)
func (scb *ScheduleCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScheduleUpsertBulk {
	scb.conflict = opts
	return &ScheduleUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Schedule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *ScheduleCreateBulk) OnConflictColumns(columns ...string) *ScheduleUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &ScheduleUpsertBulk{
		create: scb,
	}
}

// ScheduleUpsertBulk is the builder for "upsert"-ing
// a bulk of Schedule nodes.
type ScheduleUpsertBulk struct {
	create *ScheduleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Schedule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(schedule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScheduleUpsertBulk) UpdateNewValues() *ScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(schedule.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Schedule.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScheduleUpsertBulk) Ignore() *ScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScheduleUpsertBulk) DoNothing() *ScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScheduleCreateBulk.OnConflict
// documentation for more info.
func (u *ScheduleUpsertBulk) Update(set func(*ScheduleUpsert)) *ScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScheduleUpsert{UpdateSet: update})
	}))
	return u
}

// SetStationID sets the "station_id" field.
func (u *ScheduleUpsertBulk) SetStationID(v int64) *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetStationID(v)
	})
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *ScheduleUpsertBulk) UpdateStationID() *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateStationID()
	})
}

// SetDirectionID sets the "direction_id" field.
func (u *ScheduleUpsertBulk) SetDirectionID(v int64) *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetDirectionID(v)
	})
}

// UpdateDirectionID sets the "direction_id" field to the value that was provided on create.
func (u *ScheduleUpsertBulk) UpdateDirectionID() *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateDirectionID()
	})
}

// SetTime sets the "time" field.
func (u *ScheduleUpsertBulk) SetTime(v string) *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *ScheduleUpsertBulk) UpdateTime() *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateTime()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ScheduleUpsertBulk) SetCreatedAt(v time.Time) *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ScheduleUpsertBulk) UpdateCreatedAt() *ScheduleUpsertBulk {
	return u.Update(func(s *ScheduleUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *ScheduleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ScheduleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScheduleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScheduleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
