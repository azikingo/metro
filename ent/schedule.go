// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"team-manager/ent/direction"
	"team-manager/ent/schedule"
	"team-manager/ent/station"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Schedule is the model entity for the Schedule schema.
type Schedule struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// StationID holds the value of the "station_id" field.
	StationID int64 `json:"station_id,omitempty"`
	// DirectionID holds the value of the "direction_id" field.
	DirectionID int64 `json:"direction_id,omitempty"`
	// Time holds the value of the "time" field.
	Time string `json:"time,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheduleQuery when eager-loading is set.
	Edges        ScheduleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScheduleEdges holds the relations/edges for other nodes in the graph.
type ScheduleEdges struct {
	// Station holds the value of the station edge.
	Station *Station `json:"station,omitempty"`
	// Direction holds the value of the direction edge.
	Direction *Direction `json:"direction,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StationOrErr returns the Station value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleEdges) StationOrErr() (*Station, error) {
	if e.loadedTypes[0] {
		if e.Station == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: station.Label}
		}
		return e.Station, nil
	}
	return nil, &NotLoadedError{edge: "station"}
}

// DirectionOrErr returns the Direction value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleEdges) DirectionOrErr() (*Direction, error) {
	if e.loadedTypes[1] {
		if e.Direction == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: direction.Label}
		}
		return e.Direction, nil
	}
	return nil, &NotLoadedError{edge: "direction"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Schedule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case schedule.FieldID, schedule.FieldStationID, schedule.FieldDirectionID:
			values[i] = new(sql.NullInt64)
		case schedule.FieldTime:
			values[i] = new(sql.NullString)
		case schedule.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Schedule fields.
func (s *Schedule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case schedule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case schedule.FieldStationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field station_id", values[i])
			} else if value.Valid {
				s.StationID = value.Int64
			}
		case schedule.FieldDirectionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field direction_id", values[i])
			} else if value.Valid {
				s.DirectionID = value.Int64
			}
		case schedule.FieldTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				s.Time = value.String
			}
		case schedule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Schedule.
// This includes values selected through modifiers, order, etc.
func (s *Schedule) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryStation queries the "station" edge of the Schedule entity.
func (s *Schedule) QueryStation() *StationQuery {
	return NewScheduleClient(s.config).QueryStation(s)
}

// QueryDirection queries the "direction" edge of the Schedule entity.
func (s *Schedule) QueryDirection() *DirectionQuery {
	return NewScheduleClient(s.config).QueryDirection(s)
}

// Update returns a builder for updating this Schedule.
// Note that you need to call Schedule.Unwrap() before calling this method if this Schedule
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Schedule) Update() *ScheduleUpdateOne {
	return NewScheduleClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Schedule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Schedule) Unwrap() *Schedule {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Schedule is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Schedule) String() string {
	var builder strings.Builder
	builder.WriteString("Schedule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("station_id=")
	builder.WriteString(fmt.Sprintf("%v", s.StationID))
	builder.WriteString(", ")
	builder.WriteString("direction_id=")
	builder.WriteString(fmt.Sprintf("%v", s.DirectionID))
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(s.Time)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Schedules is a parsable slice of Schedule.
type Schedules []*Schedule
