// Code generated by ent, DO NOT EDIT.

package station

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the station type in the database.
	Label = "station"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// FieldIsEndStation holds the string denoting the is_end_station field in the database.
	FieldIsEndStation = "is_end_station"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeStationSchedules holds the string denoting the station_schedules edge name in mutations.
	EdgeStationSchedules = "station_schedules"
	// Table holds the table name of the station in the database.
	Table = "stations"
	// StationSchedulesTable is the table that holds the station_schedules relation/edge.
	StationSchedulesTable = "schedules"
	// StationSchedulesInverseTable is the table name for the Schedule entity.
	// It exists in this package in order to avoid circular dependency with the "schedule" package.
	StationSchedulesInverseTable = "schedules"
	// StationSchedulesColumn is the table column denoting the station_schedules relation/edge.
	StationSchedulesColumn = "station_id"
)

// Columns holds all SQL columns for station fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldLatitude,
	FieldLongitude,
	FieldIsEndStation,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsEndStation holds the default value on creation for the "is_end_station" field.
	DefaultIsEndStation bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the Station queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLatitude orders the results by the latitude field.
func ByLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatitude, opts...).ToFunc()
}

// ByLongitude orders the results by the longitude field.
func ByLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongitude, opts...).ToFunc()
}

// ByIsEndStation orders the results by the is_end_station field.
func ByIsEndStation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsEndStation, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByStationSchedulesCount orders the results by station_schedules count.
func ByStationSchedulesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStationSchedulesStep(), opts...)
	}
}

// ByStationSchedules orders the results by station_schedules terms.
func ByStationSchedules(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStationSchedulesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStationSchedulesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StationSchedulesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StationSchedulesTable, StationSchedulesColumn),
	)
}
