// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"team-manager/ent/direction"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Direction is the model entity for the Direction schema.
type Direction struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// StartStationID holds the value of the "start_station_id" field.
	StartStationID int64 `json:"start_station_id,omitempty"`
	// EndStationID holds the value of the "end_station_id" field.
	EndStationID int64 `json:"end_station_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DirectionQuery when eager-loading is set.
	Edges        DirectionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DirectionEdges holds the relations/edges for other nodes in the graph.
type DirectionEdges struct {
	// DirectionSchedules holds the value of the direction_schedules edge.
	DirectionSchedules []*Schedule `json:"direction_schedules,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DirectionSchedulesOrErr returns the DirectionSchedules value or an error if the edge
// was not loaded in eager-loading.
func (e DirectionEdges) DirectionSchedulesOrErr() ([]*Schedule, error) {
	if e.loadedTypes[0] {
		return e.DirectionSchedules, nil
	}
	return nil, &NotLoadedError{edge: "direction_schedules"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Direction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case direction.FieldID, direction.FieldStartStationID, direction.FieldEndStationID:
			values[i] = new(sql.NullInt64)
		case direction.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Direction fields.
func (d *Direction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case direction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int64(value.Int64)
		case direction.FieldStartStationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_station_id", values[i])
			} else if value.Valid {
				d.StartStationID = value.Int64
			}
		case direction.FieldEndStationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_station_id", values[i])
			} else if value.Valid {
				d.EndStationID = value.Int64
			}
		case direction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Direction.
// This includes values selected through modifiers, order, etc.
func (d *Direction) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryDirectionSchedules queries the "direction_schedules" edge of the Direction entity.
func (d *Direction) QueryDirectionSchedules() *ScheduleQuery {
	return NewDirectionClient(d.config).QueryDirectionSchedules(d)
}

// Update returns a builder for updating this Direction.
// Note that you need to call Direction.Unwrap() before calling this method if this Direction
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Direction) Update() *DirectionUpdateOne {
	return NewDirectionClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Direction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Direction) Unwrap() *Direction {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Direction is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Direction) String() string {
	var builder strings.Builder
	builder.WriteString("Direction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("start_station_id=")
	builder.WriteString(fmt.Sprintf("%v", d.StartStationID))
	builder.WriteString(", ")
	builder.WriteString("end_station_id=")
	builder.WriteString(fmt.Sprintf("%v", d.EndStationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Directions is a parsable slice of Direction.
type Directions []*Direction
