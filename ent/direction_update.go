// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"team-manager/ent/direction"
	"team-manager/ent/predicate"
	"team-manager/ent/schedule"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DirectionUpdate is the builder for updating Direction entities.
type DirectionUpdate struct {
	config
	hooks     []Hook
	mutation  *DirectionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DirectionUpdate builder.
func (du *DirectionUpdate) Where(ps ...predicate.Direction) *DirectionUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetStartStationID sets the "start_station_id" field.
func (du *DirectionUpdate) SetStartStationID(i int64) *DirectionUpdate {
	du.mutation.ResetStartStationID()
	du.mutation.SetStartStationID(i)
	return du
}

// SetNillableStartStationID sets the "start_station_id" field if the given value is not nil.
func (du *DirectionUpdate) SetNillableStartStationID(i *int64) *DirectionUpdate {
	if i != nil {
		du.SetStartStationID(*i)
	}
	return du
}

// AddStartStationID adds i to the "start_station_id" field.
func (du *DirectionUpdate) AddStartStationID(i int64) *DirectionUpdate {
	du.mutation.AddStartStationID(i)
	return du
}

// SetEndStationID sets the "end_station_id" field.
func (du *DirectionUpdate) SetEndStationID(i int64) *DirectionUpdate {
	du.mutation.ResetEndStationID()
	du.mutation.SetEndStationID(i)
	return du
}

// SetNillableEndStationID sets the "end_station_id" field if the given value is not nil.
func (du *DirectionUpdate) SetNillableEndStationID(i *int64) *DirectionUpdate {
	if i != nil {
		du.SetEndStationID(*i)
	}
	return du
}

// AddEndStationID adds i to the "end_station_id" field.
func (du *DirectionUpdate) AddEndStationID(i int64) *DirectionUpdate {
	du.mutation.AddEndStationID(i)
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DirectionUpdate) SetCreatedAt(t time.Time) *DirectionUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DirectionUpdate) SetNillableCreatedAt(t *time.Time) *DirectionUpdate {
	if t != nil {
		du.SetCreatedAt(*t)
	}
	return du
}

// AddDirectionScheduleIDs adds the "direction_schedules" edge to the Schedule entity by IDs.
func (du *DirectionUpdate) AddDirectionScheduleIDs(ids ...int64) *DirectionUpdate {
	du.mutation.AddDirectionScheduleIDs(ids...)
	return du
}

// AddDirectionSchedules adds the "direction_schedules" edges to the Schedule entity.
func (du *DirectionUpdate) AddDirectionSchedules(s ...*Schedule) *DirectionUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.AddDirectionScheduleIDs(ids...)
}

// Mutation returns the DirectionMutation object of the builder.
func (du *DirectionUpdate) Mutation() *DirectionMutation {
	return du.mutation
}

// ClearDirectionSchedules clears all "direction_schedules" edges to the Schedule entity.
func (du *DirectionUpdate) ClearDirectionSchedules() *DirectionUpdate {
	du.mutation.ClearDirectionSchedules()
	return du
}

// RemoveDirectionScheduleIDs removes the "direction_schedules" edge to Schedule entities by IDs.
func (du *DirectionUpdate) RemoveDirectionScheduleIDs(ids ...int64) *DirectionUpdate {
	du.mutation.RemoveDirectionScheduleIDs(ids...)
	return du
}

// RemoveDirectionSchedules removes "direction_schedules" edges to Schedule entities.
func (du *DirectionUpdate) RemoveDirectionSchedules(s ...*Schedule) *DirectionUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.RemoveDirectionScheduleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DirectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DirectionUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DirectionUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DirectionUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (du *DirectionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DirectionUpdate {
	du.modifiers = append(du.modifiers, modifiers...)
	return du
}

func (du *DirectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(direction.Table, direction.Columns, sqlgraph.NewFieldSpec(direction.FieldID, field.TypeInt64))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.StartStationID(); ok {
		_spec.SetField(direction.FieldStartStationID, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedStartStationID(); ok {
		_spec.AddField(direction.FieldStartStationID, field.TypeInt64, value)
	}
	if value, ok := du.mutation.EndStationID(); ok {
		_spec.SetField(direction.FieldEndStationID, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedEndStationID(); ok {
		_spec.AddField(direction.FieldEndStationID, field.TypeInt64, value)
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.SetField(direction.FieldCreatedAt, field.TypeTime, value)
	}
	if du.mutation.DirectionSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   direction.DirectionSchedulesTable,
			Columns: []string{direction.DirectionSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedDirectionSchedulesIDs(); len(nodes) > 0 && !du.mutation.DirectionSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   direction.DirectionSchedulesTable,
			Columns: []string{direction.DirectionSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DirectionSchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   direction.DirectionSchedulesTable,
			Columns: []string{direction.DirectionSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(du.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{direction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DirectionUpdateOne is the builder for updating a single Direction entity.
type DirectionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DirectionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetStartStationID sets the "start_station_id" field.
func (duo *DirectionUpdateOne) SetStartStationID(i int64) *DirectionUpdateOne {
	duo.mutation.ResetStartStationID()
	duo.mutation.SetStartStationID(i)
	return duo
}

// SetNillableStartStationID sets the "start_station_id" field if the given value is not nil.
func (duo *DirectionUpdateOne) SetNillableStartStationID(i *int64) *DirectionUpdateOne {
	if i != nil {
		duo.SetStartStationID(*i)
	}
	return duo
}

// AddStartStationID adds i to the "start_station_id" field.
func (duo *DirectionUpdateOne) AddStartStationID(i int64) *DirectionUpdateOne {
	duo.mutation.AddStartStationID(i)
	return duo
}

// SetEndStationID sets the "end_station_id" field.
func (duo *DirectionUpdateOne) SetEndStationID(i int64) *DirectionUpdateOne {
	duo.mutation.ResetEndStationID()
	duo.mutation.SetEndStationID(i)
	return duo
}

// SetNillableEndStationID sets the "end_station_id" field if the given value is not nil.
func (duo *DirectionUpdateOne) SetNillableEndStationID(i *int64) *DirectionUpdateOne {
	if i != nil {
		duo.SetEndStationID(*i)
	}
	return duo
}

// AddEndStationID adds i to the "end_station_id" field.
func (duo *DirectionUpdateOne) AddEndStationID(i int64) *DirectionUpdateOne {
	duo.mutation.AddEndStationID(i)
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DirectionUpdateOne) SetCreatedAt(t time.Time) *DirectionUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DirectionUpdateOne) SetNillableCreatedAt(t *time.Time) *DirectionUpdateOne {
	if t != nil {
		duo.SetCreatedAt(*t)
	}
	return duo
}

// AddDirectionScheduleIDs adds the "direction_schedules" edge to the Schedule entity by IDs.
func (duo *DirectionUpdateOne) AddDirectionScheduleIDs(ids ...int64) *DirectionUpdateOne {
	duo.mutation.AddDirectionScheduleIDs(ids...)
	return duo
}

// AddDirectionSchedules adds the "direction_schedules" edges to the Schedule entity.
func (duo *DirectionUpdateOne) AddDirectionSchedules(s ...*Schedule) *DirectionUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.AddDirectionScheduleIDs(ids...)
}

// Mutation returns the DirectionMutation object of the builder.
func (duo *DirectionUpdateOne) Mutation() *DirectionMutation {
	return duo.mutation
}

// ClearDirectionSchedules clears all "direction_schedules" edges to the Schedule entity.
func (duo *DirectionUpdateOne) ClearDirectionSchedules() *DirectionUpdateOne {
	duo.mutation.ClearDirectionSchedules()
	return duo
}

// RemoveDirectionScheduleIDs removes the "direction_schedules" edge to Schedule entities by IDs.
func (duo *DirectionUpdateOne) RemoveDirectionScheduleIDs(ids ...int64) *DirectionUpdateOne {
	duo.mutation.RemoveDirectionScheduleIDs(ids...)
	return duo
}

// RemoveDirectionSchedules removes "direction_schedules" edges to Schedule entities.
func (duo *DirectionUpdateOne) RemoveDirectionSchedules(s ...*Schedule) *DirectionUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.RemoveDirectionScheduleIDs(ids...)
}

// Where appends a list predicates to the DirectionUpdate builder.
func (duo *DirectionUpdateOne) Where(ps ...predicate.Direction) *DirectionUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DirectionUpdateOne) Select(field string, fields ...string) *DirectionUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Direction entity.
func (duo *DirectionUpdateOne) Save(ctx context.Context) (*Direction, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DirectionUpdateOne) SaveX(ctx context.Context) *Direction {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DirectionUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DirectionUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (duo *DirectionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DirectionUpdateOne {
	duo.modifiers = append(duo.modifiers, modifiers...)
	return duo
}

func (duo *DirectionUpdateOne) sqlSave(ctx context.Context) (_node *Direction, err error) {
	_spec := sqlgraph.NewUpdateSpec(direction.Table, direction.Columns, sqlgraph.NewFieldSpec(direction.FieldID, field.TypeInt64))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Direction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, direction.FieldID)
		for _, f := range fields {
			if !direction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != direction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.StartStationID(); ok {
		_spec.SetField(direction.FieldStartStationID, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedStartStationID(); ok {
		_spec.AddField(direction.FieldStartStationID, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.EndStationID(); ok {
		_spec.SetField(direction.FieldEndStationID, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedEndStationID(); ok {
		_spec.AddField(direction.FieldEndStationID, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.SetField(direction.FieldCreatedAt, field.TypeTime, value)
	}
	if duo.mutation.DirectionSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   direction.DirectionSchedulesTable,
			Columns: []string{direction.DirectionSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedDirectionSchedulesIDs(); len(nodes) > 0 && !duo.mutation.DirectionSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   direction.DirectionSchedulesTable,
			Columns: []string{direction.DirectionSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DirectionSchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   direction.DirectionSchedulesTable,
			Columns: []string{direction.DirectionSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(duo.modifiers...)
	_node = &Direction{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{direction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
