// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"team-manager/ent/station"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Station is the model entity for the Station schema.
type Station struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude *float32 `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude *float32 `json:"longitude,omitempty"`
	// IsEndStation holds the value of the "is_end_station" field.
	IsEndStation bool `json:"is_end_station,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StationQuery when eager-loading is set.
	Edges        StationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StationEdges holds the relations/edges for other nodes in the graph.
type StationEdges struct {
	// StationSchedules holds the value of the station_schedules edge.
	StationSchedules []*Schedule `json:"station_schedules,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StationSchedulesOrErr returns the StationSchedules value or an error if the edge
// was not loaded in eager-loading.
func (e StationEdges) StationSchedulesOrErr() ([]*Schedule, error) {
	if e.loadedTypes[0] {
		return e.StationSchedules, nil
	}
	return nil, &NotLoadedError{edge: "station_schedules"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Station) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case station.FieldIsEndStation:
			values[i] = new(sql.NullBool)
		case station.FieldLatitude, station.FieldLongitude:
			values[i] = new(sql.NullFloat64)
		case station.FieldID:
			values[i] = new(sql.NullInt64)
		case station.FieldName:
			values[i] = new(sql.NullString)
		case station.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Station fields.
func (s *Station) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case station.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case station.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case station.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				s.Latitude = new(float32)
				*s.Latitude = float32(value.Float64)
			}
		case station.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				s.Longitude = new(float32)
				*s.Longitude = float32(value.Float64)
			}
		case station.FieldIsEndStation:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_end_station", values[i])
			} else if value.Valid {
				s.IsEndStation = value.Bool
			}
		case station.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Station.
// This includes values selected through modifiers, order, etc.
func (s *Station) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryStationSchedules queries the "station_schedules" edge of the Station entity.
func (s *Station) QueryStationSchedules() *ScheduleQuery {
	return NewStationClient(s.config).QueryStationSchedules(s)
}

// Update returns a builder for updating this Station.
// Note that you need to call Station.Unwrap() before calling this method if this Station
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Station) Update() *StationUpdateOne {
	return NewStationClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Station entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Station) Unwrap() *Station {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Station is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Station) String() string {
	var builder strings.Builder
	builder.WriteString("Station(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	if v := s.Latitude; v != nil {
		builder.WriteString("latitude=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.Longitude; v != nil {
		builder.WriteString("longitude=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("is_end_station=")
	builder.WriteString(fmt.Sprintf("%v", s.IsEndStation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Stations is a parsable slice of Station.
type Stations []*Station
