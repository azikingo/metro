// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"team-manager/ent/predicate"
	"team-manager/ent/schedule"
	"team-manager/ent/station"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StationUpdate is the builder for updating Station entities.
type StationUpdate struct {
	config
	hooks     []Hook
	mutation  *StationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StationUpdate builder.
func (su *StationUpdate) Where(ps ...predicate.Station) *StationUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *StationUpdate) SetName(s string) *StationUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *StationUpdate) SetNillableName(s *string) *StationUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// ClearName clears the value of the "name" field.
func (su *StationUpdate) ClearName() *StationUpdate {
	su.mutation.ClearName()
	return su
}

// SetLatitude sets the "latitude" field.
func (su *StationUpdate) SetLatitude(f float32) *StationUpdate {
	su.mutation.ResetLatitude()
	su.mutation.SetLatitude(f)
	return su
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (su *StationUpdate) SetNillableLatitude(f *float32) *StationUpdate {
	if f != nil {
		su.SetLatitude(*f)
	}
	return su
}

// AddLatitude adds f to the "latitude" field.
func (su *StationUpdate) AddLatitude(f float32) *StationUpdate {
	su.mutation.AddLatitude(f)
	return su
}

// ClearLatitude clears the value of the "latitude" field.
func (su *StationUpdate) ClearLatitude() *StationUpdate {
	su.mutation.ClearLatitude()
	return su
}

// SetLongitude sets the "longitude" field.
func (su *StationUpdate) SetLongitude(f float32) *StationUpdate {
	su.mutation.ResetLongitude()
	su.mutation.SetLongitude(f)
	return su
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (su *StationUpdate) SetNillableLongitude(f *float32) *StationUpdate {
	if f != nil {
		su.SetLongitude(*f)
	}
	return su
}

// AddLongitude adds f to the "longitude" field.
func (su *StationUpdate) AddLongitude(f float32) *StationUpdate {
	su.mutation.AddLongitude(f)
	return su
}

// ClearLongitude clears the value of the "longitude" field.
func (su *StationUpdate) ClearLongitude() *StationUpdate {
	su.mutation.ClearLongitude()
	return su
}

// SetIsEndStation sets the "is_end_station" field.
func (su *StationUpdate) SetIsEndStation(b bool) *StationUpdate {
	su.mutation.SetIsEndStation(b)
	return su
}

// SetNillableIsEndStation sets the "is_end_station" field if the given value is not nil.
func (su *StationUpdate) SetNillableIsEndStation(b *bool) *StationUpdate {
	if b != nil {
		su.SetIsEndStation(*b)
	}
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *StationUpdate) SetCreatedAt(t time.Time) *StationUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *StationUpdate) SetNillableCreatedAt(t *time.Time) *StationUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// AddStationScheduleIDs adds the "station_schedules" edge to the Schedule entity by IDs.
func (su *StationUpdate) AddStationScheduleIDs(ids ...int64) *StationUpdate {
	su.mutation.AddStationScheduleIDs(ids...)
	return su
}

// AddStationSchedules adds the "station_schedules" edges to the Schedule entity.
func (su *StationUpdate) AddStationSchedules(s ...*Schedule) *StationUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddStationScheduleIDs(ids...)
}

// Mutation returns the StationMutation object of the builder.
func (su *StationUpdate) Mutation() *StationMutation {
	return su.mutation
}

// ClearStationSchedules clears all "station_schedules" edges to the Schedule entity.
func (su *StationUpdate) ClearStationSchedules() *StationUpdate {
	su.mutation.ClearStationSchedules()
	return su
}

// RemoveStationScheduleIDs removes the "station_schedules" edge to Schedule entities by IDs.
func (su *StationUpdate) RemoveStationScheduleIDs(ids ...int64) *StationUpdate {
	su.mutation.RemoveStationScheduleIDs(ids...)
	return su
}

// RemoveStationSchedules removes "station_schedules" edges to Schedule entities.
func (su *StationUpdate) RemoveStationSchedules(s ...*Schedule) *StationUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveStationScheduleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StationUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StationUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StationUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *StationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StationUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *StationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(station.Table, station.Columns, sqlgraph.NewFieldSpec(station.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(station.FieldName, field.TypeString, value)
	}
	if su.mutation.NameCleared() {
		_spec.ClearField(station.FieldName, field.TypeString)
	}
	if value, ok := su.mutation.Latitude(); ok {
		_spec.SetField(station.FieldLatitude, field.TypeFloat32, value)
	}
	if value, ok := su.mutation.AddedLatitude(); ok {
		_spec.AddField(station.FieldLatitude, field.TypeFloat32, value)
	}
	if su.mutation.LatitudeCleared() {
		_spec.ClearField(station.FieldLatitude, field.TypeFloat32)
	}
	if value, ok := su.mutation.Longitude(); ok {
		_spec.SetField(station.FieldLongitude, field.TypeFloat32, value)
	}
	if value, ok := su.mutation.AddedLongitude(); ok {
		_spec.AddField(station.FieldLongitude, field.TypeFloat32, value)
	}
	if su.mutation.LongitudeCleared() {
		_spec.ClearField(station.FieldLongitude, field.TypeFloat32)
	}
	if value, ok := su.mutation.IsEndStation(); ok {
		_spec.SetField(station.FieldIsEndStation, field.TypeBool, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(station.FieldCreatedAt, field.TypeTime, value)
	}
	if su.mutation.StationSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.StationSchedulesTable,
			Columns: []string{station.StationSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedStationSchedulesIDs(); len(nodes) > 0 && !su.mutation.StationSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.StationSchedulesTable,
			Columns: []string{station.StationSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StationSchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.StationSchedulesTable,
			Columns: []string{station.StationSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{station.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StationUpdateOne is the builder for updating a single Station entity.
type StationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (suo *StationUpdateOne) SetName(s string) *StationUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableName(s *string) *StationUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// ClearName clears the value of the "name" field.
func (suo *StationUpdateOne) ClearName() *StationUpdateOne {
	suo.mutation.ClearName()
	return suo
}

// SetLatitude sets the "latitude" field.
func (suo *StationUpdateOne) SetLatitude(f float32) *StationUpdateOne {
	suo.mutation.ResetLatitude()
	suo.mutation.SetLatitude(f)
	return suo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableLatitude(f *float32) *StationUpdateOne {
	if f != nil {
		suo.SetLatitude(*f)
	}
	return suo
}

// AddLatitude adds f to the "latitude" field.
func (suo *StationUpdateOne) AddLatitude(f float32) *StationUpdateOne {
	suo.mutation.AddLatitude(f)
	return suo
}

// ClearLatitude clears the value of the "latitude" field.
func (suo *StationUpdateOne) ClearLatitude() *StationUpdateOne {
	suo.mutation.ClearLatitude()
	return suo
}

// SetLongitude sets the "longitude" field.
func (suo *StationUpdateOne) SetLongitude(f float32) *StationUpdateOne {
	suo.mutation.ResetLongitude()
	suo.mutation.SetLongitude(f)
	return suo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableLongitude(f *float32) *StationUpdateOne {
	if f != nil {
		suo.SetLongitude(*f)
	}
	return suo
}

// AddLongitude adds f to the "longitude" field.
func (suo *StationUpdateOne) AddLongitude(f float32) *StationUpdateOne {
	suo.mutation.AddLongitude(f)
	return suo
}

// ClearLongitude clears the value of the "longitude" field.
func (suo *StationUpdateOne) ClearLongitude() *StationUpdateOne {
	suo.mutation.ClearLongitude()
	return suo
}

// SetIsEndStation sets the "is_end_station" field.
func (suo *StationUpdateOne) SetIsEndStation(b bool) *StationUpdateOne {
	suo.mutation.SetIsEndStation(b)
	return suo
}

// SetNillableIsEndStation sets the "is_end_station" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableIsEndStation(b *bool) *StationUpdateOne {
	if b != nil {
		suo.SetIsEndStation(*b)
	}
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *StationUpdateOne) SetCreatedAt(t time.Time) *StationUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableCreatedAt(t *time.Time) *StationUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// AddStationScheduleIDs adds the "station_schedules" edge to the Schedule entity by IDs.
func (suo *StationUpdateOne) AddStationScheduleIDs(ids ...int64) *StationUpdateOne {
	suo.mutation.AddStationScheduleIDs(ids...)
	return suo
}

// AddStationSchedules adds the "station_schedules" edges to the Schedule entity.
func (suo *StationUpdateOne) AddStationSchedules(s ...*Schedule) *StationUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddStationScheduleIDs(ids...)
}

// Mutation returns the StationMutation object of the builder.
func (suo *StationUpdateOne) Mutation() *StationMutation {
	return suo.mutation
}

// ClearStationSchedules clears all "station_schedules" edges to the Schedule entity.
func (suo *StationUpdateOne) ClearStationSchedules() *StationUpdateOne {
	suo.mutation.ClearStationSchedules()
	return suo
}

// RemoveStationScheduleIDs removes the "station_schedules" edge to Schedule entities by IDs.
func (suo *StationUpdateOne) RemoveStationScheduleIDs(ids ...int64) *StationUpdateOne {
	suo.mutation.RemoveStationScheduleIDs(ids...)
	return suo
}

// RemoveStationSchedules removes "station_schedules" edges to Schedule entities.
func (suo *StationUpdateOne) RemoveStationSchedules(s ...*Schedule) *StationUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveStationScheduleIDs(ids...)
}

// Where appends a list predicates to the StationUpdate builder.
func (suo *StationUpdateOne) Where(ps ...predicate.Station) *StationUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StationUpdateOne) Select(field string, fields ...string) *StationUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Station entity.
func (suo *StationUpdateOne) Save(ctx context.Context) (*Station, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StationUpdateOne) SaveX(ctx context.Context) *Station {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StationUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StationUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *StationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StationUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *StationUpdateOne) sqlSave(ctx context.Context) (_node *Station, err error) {
	_spec := sqlgraph.NewUpdateSpec(station.Table, station.Columns, sqlgraph.NewFieldSpec(station.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Station.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, station.FieldID)
		for _, f := range fields {
			if !station.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != station.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(station.FieldName, field.TypeString, value)
	}
	if suo.mutation.NameCleared() {
		_spec.ClearField(station.FieldName, field.TypeString)
	}
	if value, ok := suo.mutation.Latitude(); ok {
		_spec.SetField(station.FieldLatitude, field.TypeFloat32, value)
	}
	if value, ok := suo.mutation.AddedLatitude(); ok {
		_spec.AddField(station.FieldLatitude, field.TypeFloat32, value)
	}
	if suo.mutation.LatitudeCleared() {
		_spec.ClearField(station.FieldLatitude, field.TypeFloat32)
	}
	if value, ok := suo.mutation.Longitude(); ok {
		_spec.SetField(station.FieldLongitude, field.TypeFloat32, value)
	}
	if value, ok := suo.mutation.AddedLongitude(); ok {
		_spec.AddField(station.FieldLongitude, field.TypeFloat32, value)
	}
	if suo.mutation.LongitudeCleared() {
		_spec.ClearField(station.FieldLongitude, field.TypeFloat32)
	}
	if value, ok := suo.mutation.IsEndStation(); ok {
		_spec.SetField(station.FieldIsEndStation, field.TypeBool, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(station.FieldCreatedAt, field.TypeTime, value)
	}
	if suo.mutation.StationSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.StationSchedulesTable,
			Columns: []string{station.StationSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedStationSchedulesIDs(); len(nodes) > 0 && !suo.mutation.StationSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.StationSchedulesTable,
			Columns: []string{station.StationSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StationSchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.StationSchedulesTable,
			Columns: []string{station.StationSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Station{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{station.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
