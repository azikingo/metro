// Code generated by ent, DO NOT EDIT.

package schedule

import (
	"team-manager/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldID, id))
}

// StationID applies equality check predicate on the "station_id" field. It's identical to StationIDEQ.
func StationID(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldStationID, v))
}

// DirectionID applies equality check predicate on the "direction_id" field. It's identical to DirectionIDEQ.
func DirectionID(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldDirectionID, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldTime, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldCreatedAt, v))
}

// StationIDEQ applies the EQ predicate on the "station_id" field.
func StationIDEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldStationID, v))
}

// StationIDNEQ applies the NEQ predicate on the "station_id" field.
func StationIDNEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldStationID, v))
}

// StationIDIn applies the In predicate on the "station_id" field.
func StationIDIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldStationID, vs...))
}

// StationIDNotIn applies the NotIn predicate on the "station_id" field.
func StationIDNotIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldStationID, vs...))
}

// DirectionIDEQ applies the EQ predicate on the "direction_id" field.
func DirectionIDEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldDirectionID, v))
}

// DirectionIDNEQ applies the NEQ predicate on the "direction_id" field.
func DirectionIDNEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldDirectionID, v))
}

// DirectionIDIn applies the In predicate on the "direction_id" field.
func DirectionIDIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldDirectionID, vs...))
}

// DirectionIDNotIn applies the NotIn predicate on the "direction_id" field.
func DirectionIDNotIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldDirectionID, vs...))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldTime, v))
}

// TimeContains applies the Contains predicate on the "time" field.
func TimeContains(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContains(FieldTime, v))
}

// TimeHasPrefix applies the HasPrefix predicate on the "time" field.
func TimeHasPrefix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasPrefix(FieldTime, v))
}

// TimeHasSuffix applies the HasSuffix predicate on the "time" field.
func TimeHasSuffix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasSuffix(FieldTime, v))
}

// TimeEqualFold applies the EqualFold predicate on the "time" field.
func TimeEqualFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEqualFold(FieldTime, v))
}

// TimeContainsFold applies the ContainsFold predicate on the "time" field.
func TimeContainsFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContainsFold(FieldTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldCreatedAt, v))
}

// HasStation applies the HasEdge predicate on the "station" edge.
func HasStation() predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StationTable, StationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStationWith applies the HasEdge predicate on the "station" edge with a given conditions (other predicates).
func HasStationWith(preds ...predicate.Station) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := newStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDirection applies the HasEdge predicate on the "direction" edge.
func HasDirection() predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DirectionTable, DirectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDirectionWith applies the HasEdge predicate on the "direction" edge with a given conditions (other predicates).
func HasDirectionWith(preds ...predicate.Direction) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := newDirectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(sql.NotPredicates(p))
}
