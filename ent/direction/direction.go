// Code generated by ent, DO NOT EDIT.

package direction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the direction type in the database.
	Label = "direction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStartStationID holds the string denoting the start_station_id field in the database.
	FieldStartStationID = "start_station_id"
	// FieldEndStationID holds the string denoting the end_station_id field in the database.
	FieldEndStationID = "end_station_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeDirectionSchedules holds the string denoting the direction_schedules edge name in mutations.
	EdgeDirectionSchedules = "direction_schedules"
	// Table holds the table name of the direction in the database.
	Table = "directions"
	// DirectionSchedulesTable is the table that holds the direction_schedules relation/edge.
	DirectionSchedulesTable = "schedules"
	// DirectionSchedulesInverseTable is the table name for the Schedule entity.
	// It exists in this package in order to avoid circular dependency with the "schedule" package.
	DirectionSchedulesInverseTable = "schedules"
	// DirectionSchedulesColumn is the table column denoting the direction_schedules relation/edge.
	DirectionSchedulesColumn = "direction_id"
)

// Columns holds all SQL columns for direction fields.
var Columns = []string{
	FieldID,
	FieldStartStationID,
	FieldEndStationID,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the Direction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStartStationID orders the results by the start_station_id field.
func ByStartStationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartStationID, opts...).ToFunc()
}

// ByEndStationID orders the results by the end_station_id field.
func ByEndStationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndStationID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDirectionSchedulesCount orders the results by direction_schedules count.
func ByDirectionSchedulesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDirectionSchedulesStep(), opts...)
	}
}

// ByDirectionSchedules orders the results by direction_schedules terms.
func ByDirectionSchedules(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDirectionSchedulesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDirectionSchedulesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DirectionSchedulesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DirectionSchedulesTable, DirectionSchedulesColumn),
	)
}
