// Code generated by ent, DO NOT EDIT.

package direction

import (
	"team-manager/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Direction {
	return predicate.Direction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Direction {
	return predicate.Direction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Direction {
	return predicate.Direction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Direction {
	return predicate.Direction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Direction {
	return predicate.Direction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Direction {
	return predicate.Direction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Direction {
	return predicate.Direction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Direction {
	return predicate.Direction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Direction {
	return predicate.Direction(sql.FieldLTE(FieldID, id))
}

// StartStationID applies equality check predicate on the "start_station_id" field. It's identical to StartStationIDEQ.
func StartStationID(v int64) predicate.Direction {
	return predicate.Direction(sql.FieldEQ(FieldStartStationID, v))
}

// EndStationID applies equality check predicate on the "end_station_id" field. It's identical to EndStationIDEQ.
func EndStationID(v int64) predicate.Direction {
	return predicate.Direction(sql.FieldEQ(FieldEndStationID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Direction {
	return predicate.Direction(sql.FieldEQ(FieldCreatedAt, v))
}

// StartStationIDEQ applies the EQ predicate on the "start_station_id" field.
func StartStationIDEQ(v int64) predicate.Direction {
	return predicate.Direction(sql.FieldEQ(FieldStartStationID, v))
}

// StartStationIDNEQ applies the NEQ predicate on the "start_station_id" field.
func StartStationIDNEQ(v int64) predicate.Direction {
	return predicate.Direction(sql.FieldNEQ(FieldStartStationID, v))
}

// StartStationIDIn applies the In predicate on the "start_station_id" field.
func StartStationIDIn(vs ...int64) predicate.Direction {
	return predicate.Direction(sql.FieldIn(FieldStartStationID, vs...))
}

// StartStationIDNotIn applies the NotIn predicate on the "start_station_id" field.
func StartStationIDNotIn(vs ...int64) predicate.Direction {
	return predicate.Direction(sql.FieldNotIn(FieldStartStationID, vs...))
}

// StartStationIDGT applies the GT predicate on the "start_station_id" field.
func StartStationIDGT(v int64) predicate.Direction {
	return predicate.Direction(sql.FieldGT(FieldStartStationID, v))
}

// StartStationIDGTE applies the GTE predicate on the "start_station_id" field.
func StartStationIDGTE(v int64) predicate.Direction {
	return predicate.Direction(sql.FieldGTE(FieldStartStationID, v))
}

// StartStationIDLT applies the LT predicate on the "start_station_id" field.
func StartStationIDLT(v int64) predicate.Direction {
	return predicate.Direction(sql.FieldLT(FieldStartStationID, v))
}

// StartStationIDLTE applies the LTE predicate on the "start_station_id" field.
func StartStationIDLTE(v int64) predicate.Direction {
	return predicate.Direction(sql.FieldLTE(FieldStartStationID, v))
}

// EndStationIDEQ applies the EQ predicate on the "end_station_id" field.
func EndStationIDEQ(v int64) predicate.Direction {
	return predicate.Direction(sql.FieldEQ(FieldEndStationID, v))
}

// EndStationIDNEQ applies the NEQ predicate on the "end_station_id" field.
func EndStationIDNEQ(v int64) predicate.Direction {
	return predicate.Direction(sql.FieldNEQ(FieldEndStationID, v))
}

// EndStationIDIn applies the In predicate on the "end_station_id" field.
func EndStationIDIn(vs ...int64) predicate.Direction {
	return predicate.Direction(sql.FieldIn(FieldEndStationID, vs...))
}

// EndStationIDNotIn applies the NotIn predicate on the "end_station_id" field.
func EndStationIDNotIn(vs ...int64) predicate.Direction {
	return predicate.Direction(sql.FieldNotIn(FieldEndStationID, vs...))
}

// EndStationIDGT applies the GT predicate on the "end_station_id" field.
func EndStationIDGT(v int64) predicate.Direction {
	return predicate.Direction(sql.FieldGT(FieldEndStationID, v))
}

// EndStationIDGTE applies the GTE predicate on the "end_station_id" field.
func EndStationIDGTE(v int64) predicate.Direction {
	return predicate.Direction(sql.FieldGTE(FieldEndStationID, v))
}

// EndStationIDLT applies the LT predicate on the "end_station_id" field.
func EndStationIDLT(v int64) predicate.Direction {
	return predicate.Direction(sql.FieldLT(FieldEndStationID, v))
}

// EndStationIDLTE applies the LTE predicate on the "end_station_id" field.
func EndStationIDLTE(v int64) predicate.Direction {
	return predicate.Direction(sql.FieldLTE(FieldEndStationID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Direction {
	return predicate.Direction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Direction {
	return predicate.Direction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Direction {
	return predicate.Direction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Direction {
	return predicate.Direction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Direction {
	return predicate.Direction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Direction {
	return predicate.Direction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Direction {
	return predicate.Direction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Direction {
	return predicate.Direction(sql.FieldLTE(FieldCreatedAt, v))
}

// HasDirectionSchedules applies the HasEdge predicate on the "direction_schedules" edge.
func HasDirectionSchedules() predicate.Direction {
	return predicate.Direction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DirectionSchedulesTable, DirectionSchedulesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDirectionSchedulesWith applies the HasEdge predicate on the "direction_schedules" edge with a given conditions (other predicates).
func HasDirectionSchedulesWith(preds ...predicate.Schedule) predicate.Direction {
	return predicate.Direction(func(s *sql.Selector) {
		step := newDirectionSchedulesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Direction) predicate.Direction {
	return predicate.Direction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Direction) predicate.Direction {
	return predicate.Direction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Direction) predicate.Direction {
	return predicate.Direction(sql.NotPredicates(p))
}
